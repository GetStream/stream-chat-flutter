name: legacy_version_analyze

env:
  # Note: The versions below should be manually updated after a new stable
  # version comes out.
  flutter_version: "3.24.5"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Does a sanity check that packages at least pass analysis on the N-1
  # versions of Flutter stable if the package claims to support that version.
  # This is to minimize accidentally making changes that break old versions
  # (which we don't commit to supporting, but don't want to actively break)
  # without updating the constraints.
  analyze_legacy_versions:
    timeout-minutes: 15
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: stable
          flutter-version: ${{ env.flutter_version }}
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      - name: 📦 Install Tools
        run: flutter pub global activate melos

      - name: ⚙️ Bootstrap Workspace
        run: melos bootstrap

      - name: 🕵️ Analyze
        # Only analyze lib/; non-client code doesn't need to work on
        # all supported legacy version.
        run: melos exec -c 1 --diff=origin/master...HEAD --include-dependents -- "dart analyze lib --fatal-infos"